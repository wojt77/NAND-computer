from logic_gates import *

#functions to convert between binary strings and boolean bits
def binstr_to_bits(s):
    return [c == '1' for c in reversed(s)]

def bits_to_binstr(bits):
    return ''.join('1' if b else '0' for b in reversed(bits))

tests = [
    ("0000000000000000","1111111111111111",1,0,1,0,1,0,"0000000000000000",1,0),
    ("0000000000000000","1111111111111111",1,1,1,1,1,1,"0000000000000001",0,0),
    ("0000000000000000","1111111111111111",1,1,1,0,1,0,"1111111111111111",0,1),
    ("0000000000000000","1111111111111111",0,0,1,1,0,0,"0000000000000000",1,0),
    ("0000000000000000","1111111111111111",1,1,0,0,0,0,"1111111111111111",0,1),
    ("0000000000000000","1111111111111111",0,0,1,1,0,1,"1111111111111111",0,1),
    ("0000000000000000","1111111111111111",1,1,0,0,0,1,"0000000000000000",1,0),
    ("0000000000000000","1111111111111111",0,0,1,1,1,1,"0000000000000000",1,0),
    ("0000000000000000","1111111111111111",1,1,0,0,1,1,"0000000000000001",0,0),
    ("0000000000000000","1111111111111111",0,1,1,1,1,1,"0000000000000001",0,0),
    ("0000000000000000","1111111111111111",1,1,0,1,1,1,"0000000000000000",1,0),
    ("0000000000000000","1111111111111111",0,0,1,1,1,0,"1111111111111111",0,1),
    ("0000000000000000","1111111111111111",1,1,0,0,1,0,"1111111111111110",0,1),
    ("0000000000000000","1111111111111111",0,0,0,0,1,0,"1111111111111111",0,1),
    ("0000000000000000","1111111111111111",0,1,0,0,1,1,"0000000000000001",0,0),
    ("0000000000000000","1111111111111111",0,0,0,1,1,1,"1111111111111111",0,1),
    ("0000000000000000","1111111111111111",0,0,0,0,0,0,"0000000000000000",1,0),
    ("0000000000000000","1111111111111111",0,1,0,1,0,1,"1111111111111111",0,1),
    ("0000000000010001","0000000000000011",1,0,1,0,1,0,"0000000000000000",1,0),
    ("0000000000010001","0000000000000011",1,1,1,1,1,1,"0000000000000001",0,0),
    ("0000000000010001","0000000000000011",1,1,1,0,1,0,"1111111111111111",0,1),
    ("0000000000010001","0000000000000011",0,0,1,1,0,0,"0000000000010001",0,0),
    ("0000000000010001","0000000000000011",1,1,0,0,0,0,"0000000000000011",0,0),
    ("0000000000010001","0000000000000011",0,0,1,1,0,1,"1111111111101110",0,1),
    ("0000000000010001","0000000000000011",1,1,0,0,0,1,"1111111111111100",0,1),
    ("0000000000010001","0000000000000011",0,0,1,1,1,1,"1111111111101111",0,1),
    ("0000000000010001","0000000000000011",1,1,0,0,1,1,"1111111111111101",0,1),
    ("0000000000010001","0000000000000011",0,1,1,1,1,1,"0000000000010010",0,0),
    ("0000000000010001","0000000000000011",1,1,0,1,1,1,"0000000000000100",0,0),
    ("0000000000010001","0000000000000011",0,0,1,1,1,0,"0000000000010000",0,0),
    ("0000000000010001","0000000000000011",1,1,0,0,1,0,"0000000000000010",0,0),
    ("0000000000010001","0000000000000011",0,0,0,0,1,0,"0000000000010100",0,0),
    ("0000000000010001","0000000000000011",0,1,0,0,1,1,"0000000000001110",0,0),
    ("0000000000010001","0000000000000011",0,0,0,1,1,1,"1111111111110010",0,1),
    ("0000000000010001","0000000000000011",0,0,0,0,0,0,"0000000000000001",0,0),
    ("0000000000010001","0000000000000011",0,1,0,1,0,1,"0000000000010011",0,0)
]

pass_count = 0

for x_str, y_str, zx, nx, zy, ny, f, no, out_exp_str, zr_exp, ng_exp in tests:
    x = binstr_to_bits(x_str)
    y = binstr_to_bits(y_str)
    out, zr, ng = ALU(x, y, zx, nx, zy, ny, f, no)
    out_str = bits_to_binstr(out)
    if out_str == out_exp_str and int(zr) == zr_exp and int(ng) == ng_exp:
        pass_count += 1

print(f"{pass_count} / {len(tests)} Correct")